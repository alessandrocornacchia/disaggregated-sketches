[General]

network = ParkingLot
description = "disaggregated sketches on ParkingLot"

#output-vector-file = "${resultdir}/${configname}-${runnumber}-tmp.vec" #${iterationvarsf}
#output-scalar-file = "${resultdir}/${configname}-${runnumber}-tmp.sca"

repeat = 10

# one seed for traffic generation, independent from the seeds of sketch hash functions
num-rngs = 3

# one seed-set for each repetition (same repetition same traffic for all configurations)
seed-set = ${repetition}
	
# TODO flow generator as module a part so that it can be configured with its own generator

# logical to physical rng mappings
**.sketch.rng-0 = 1	# sketch hashes use phys-rng-1

# logical rng 1 is used in flow generation and it corresponds to phys-rng-2
# (must specify index 1 in the pareto_shifted [see below])
**.source[*].rng-1 = 2

cmdenv-express-mode = true

*.numHosts = 9
#*.numHosts.param-record-as-scalar = true
*.numSwitches = 8
#*.numSwitches.param-record-as-scalar = true

*.K = ${updateOn = 1,2,4,8}

**.switch[*].sketch.d = 1
#**.switch[0].sketch.d.param-record-as-scalar = true
**.switch[*].sketch.w = 2000
#**.switch[0].sketch.w.param-record-as-scalar = true

# a=shape, b=scale, c=location/shift, using number generator 1
#**.source[*].flowSize = pareto_shifted(0.8333333333333334, 1.388888888888889, 1.6666666666666667, 1)

# service time is 1s and average flow size is 10 pkts, hence with lambda=10/11 pkts/sec and mu=1pkt/s we have load close to 1
**.source[0].interArrivalTime = exponential(11s)
**.source[1..].interArrivalTime = exponential(1100s) # change traffic intensity of orthogonal sources here

# stop here simulation (horizontal stream has completed this num of flows)
# source stop generating after maxFlows and sink termniates simulation after receiving all 
*.source[0].maxFlows = 10000
**.sink[0].maxFlows = 10000

**.sink[*].pktErrors*.vector-recording = false	# disable packet by packet recording


