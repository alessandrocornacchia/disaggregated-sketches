[General]

network = ParkingLot
description = "disaggregated sketches on ParkingLot"

#output-vector-file = "${resultdir}/${configname}-${runnumber}-tmp.vec" #${iterationvarsf}
#output-scalar-file = "${resultdir}/${configname}-${runnumber}-tmp.sca"

repeat = 5

# one seed for traffic generation, independent from the seeds of sketch hash functions
num-rngs = 3

# one seed-set for each repetition (same repetition same traffic for all configurations)
seed-set = ${repetition}
	
# TODO flow generator as module a part so that it can be configured with its own generator

# logical to physical rng mappings
**.sketch.rng-0 = 1	# sketch hashes use phys-rng-1

# logical rng 1 is used in flow generation and it corresponds to phys-rng-2
# (must specify index 1 in the pareto_shifted [see below])
**.source[*].rng-1 = 2

cmdenv-express-mode = true

*.numHosts = 9
#*.numHosts.param-record-as-scalar = true
*.numSwitches = 8
#*.numSwitches.param-record-as-scalar = true

**.switch[*].sketch.d = 1
#**.switch[0].sketch.d.param-record-as-scalar = true
**.switch[*].sketch.w = ${w=1000, 2000, 4000, 8000}
#**.switch[0].sketch.w.param-record-as-scalar = true
**.sink[*].pktErrors*.vector-recording = false	# disable packet by packet recording

# --------------------------------------------------------------------------------------
[Config AllActive]
# a=shape, b=scale, c=location/shift, using number generator 1
#**.source[*].flowSize = pareto_shifted(0.8333333333333334, 1.388888888888889, 1.6666666666666667, 1)
**.source[*].flowSize = pareto_shifted(1.2, 1.6666666666666665, 0, 1) # pareto with shape parameter 1.2 and mean 10

# service time is 1s and average flow size is 10 pkts, hence with lambda=10/11 pkts/sec and mu=1pkt/s we have load close to 1
**.source[0].interArrivalTime = exponential(11s)
**.source[1..].interArrivalTime = exponential(1100s) # change traffic intensity of orthogonal sources here

# stop here simulation (horizontal stream has completed this num of flows)
# source stop generating after maxFlows and sink termniates simulation after receiving all 
*.source[0].maxFlows = 10000
**.sink[0].maxFlows = 10000 # manually terminate simulation when sink 0 received 10k flows

# this is set to large value to be sure that it is executed when all flows have terminated
# it is ~ source[0].maxFlows * ia * 2 
#**.sink[*].epochDuration = 20000s

# --------------------------------------------------------------------------------------
# inactivate one vertical source and generate low skewed traffic from all the others
# Let the simulation finish when all packets from all sources have been transmitted
[Config OneInactive]

**.source[1].startTime = -1s # deactivate source 1

# possible distribution for vertical flows
# shape 0.8, mean~20, ia=20ms, startTime = 10k * 20ms = 200s
# shape 0.5, mean~100, ia=100ms, startTime = 10k * 100ms = 1000s
**.source[1..].flowSize = pareto_shifted(0.5, 1, 0, 1)
**.source[1..].interArrivalTime = exponential(100ms)
**.source[1..].packetTxTime = 1ms

# start horizontal source after that vertical sources have generated 10k flows
**.source[0].startTime = 1000s	

**.source[0].flowSize = pareto_shifted(1.2, 1.6666666666666665, 0, 1) # pareto with shape parameter 1.2 and mean 10
**.source[0].interArrivalTime = exponential(10ms)
**.source[0].packetTxTime = 1ms

# all sources generate up to 10k flows and max flow size is truncated to 10k packets. 
**.source[*].maxFlows = 10000
**.source[*].maxFlowSize = 10000
# Sink 0 stops simulation when it has received 10k flows, otherwise set this to -1
**.sink[0].maxFlows = 10000

# -------------------------------------------
[Config DISCO]
extends = OneInactive #OneInactive # AllActive	# change here to AllActive or OneInactive
*.K = 8

# -------------------------------------------
[Config TA-DISCO]
extends = OneInactive	# change here to AllActive or OneInactive
*.K = ${updateOn = 1, 2, 3, 4, 5, 6, 7}
#*.load_balacing = ${lb = "random", "deterministic", "suicide"}
